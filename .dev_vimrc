" other vimrc source util
function! s:source_rc(path, ...) abort 
  let l:use_global = get(a:000, 0, !has('vim_starting'))
  let l:abspath = resolve(expand('~/.vim/rc/' . a:path))
  if !l:use_global
    execute 'source' fnameescape(l:abspath)
    return
  endif

  " substitute all 'set' to 'setglobal'
  let l:content = map(readfile(l:abspath),
        \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
  " create tempfile and source the tempfile
  let l:tempfile = tempname()
  try
    call writefile(l:content, l:tempfile)
    execute 'source' fnameescape(l:tempfile)
  finally
    if filereadable(l:tempfile)
      call delete(l:tempfile)
    endif
  endtry
endfunction

" Plugins {{{
call plug#begin('~/.local/share/nvim/plugged')

" Color Schemes
Plug 'tomasr/molokai'

" Utility
Plug 'scrooloose/nerdtree'

" LSP
Plug 'prabirshrestha/async.vim'
" Plug 'prabirshrestha/asyncomplete.vim'
" Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'Shougo/deoplete.nvim'
" Plug 'lighttiger2505/deoplete-vim-lsp'

call plug#end()

" Load python
if isdirectory(expand($PYENV_PATH))
    let g:python_host_prog = $PYENV_PATH . '/versions/neovim2/bin/python'
    let g:python3_host_prog = $PYENV_PATH . '/versions/neovim3/bin/python'
endif
if isdirectory(expand($ANYENV_PATH))
    let g:python_host_prog = $ANYENV_PATH . '/envs/pyenv/versions/neovim2/bin/python'
    let g:python3_host_prog = $ANYENV_PATH . '/envs/pyenv/versions/neovim3/bin/python'
endif

" " Develop plugins {{{

" set runtimepath^=$HOME/dev/src/github.com/Shougo/deoplete.nvim
" set runtimepath^=$HOME/dev/src/github.com/lighttiger2505/deoplete-vim-lsp
set runtimepath^=$HOME/dev/src/github.com/tex/deoplete-vim-lsp

" " }}}

" Plugins {{{

" NERDTree {{{
nnoremap <silent> <Leader>t :<C-u>NERDTreeToggle<CR>
nnoremap <silent> <Leader>f :<C-u>NERDTreeFind %<CR>
" }}}

" Deoplete {{{
call s:source_rc('plugins/deoplete.rc.vim')
" Debugging deoplete
call deoplete#enable_logging('DEBUG', 'deoplete.log')
" }}}

" vim-lsp {{{
call s:source_rc('plugins/lsp.rc.vim')
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')
" }}}

call s:source_rc('mappings.rc.vim')
call s:source_rc('options.rc.vim')
call s:source_rc('filetype.rc.vim')
call s:source_rc('autocmd.rc.vim')

" Reload .vimrc
nnoremap <Space>s :source $HOME/.dev_vimrc<CR>

colorscheme molokai

" magic word after
filetype plugin indent on
syntax enable

# コミットメッセージのフォーマットを以下に定義します。コミット内容は日本語で記述してください。
#
# <型>[任意 スコープ]: <タイトル>
#   - 型:       修正内容を端的に示す識別子、下部のリストから選択する
#   - スコープ: 省略可。影響範囲（例: compiler, http, router など）を小文字で記述
#   - タイトル: 変更内容を命令形で簡潔に記述（50文字以内、末尾にピリオドをつけない）

# [任意 本文]
#   - 1行空けて詳細を記述
#   - どのように変更したか、なぜ必要なのかを具体的に

# [任意 フッター]
#   - BREAKING CHANGE: 破壊的変更の詳細を記述
#   - Closes #<issue番号> など、関連するIssue番号を記述

# 例:
# ---
# feat(parser): 新しい演算子のサポート
#
# 演算子「??」 のパースロジックを追加し、Null合体演算子を処理するようにしました。
# この変更により、`a ?? b` のような式で、aがnullまたはundefinedの場合、bにフォールバックするようになりました。
#
# BREAKING CHANGE: 非推奨となった演算子「||」のフォールバックロジックは削除されました。
# Closes #1234
# ---
#
# 型の一覧:
#   feat:     新機能の追加。APIやUIに新たな機能・オプションを導入
#   fix:      バグ修正。既存機能の不具合対応や動作ミスの修正
#   perf:     パフォーマンス改善。処理速度やメモリ使用量を最適化するコード変更
#   refactor: リファクタリング（機能追加・バグ修正を伴わないコード構造の整理）。コードのモジュール化や重複排除など
#   style:    コードの動作に影響しないスタイル変更。インデント、改行、セミコロンの追加・削除、フォーマット整形など
#   test:     テストの追加・修正。ユニットテストや結合テストの新規作成、既存テストの修正
#   chore:    ソースコードやテスト以外のファイル更新、プロジェクト構成やツール設定の更新など。.gitignore の編集、ビルドスクリプトの補正など
#   revert:   以前のコミットを取り消す変更
#   build:    ビルドシステムや外部依存関係に影響する変更。タスクランナーやバンドラの設定、npm・yarn依存ライブラリのアップデートなど
#   ci:       CI用の設定ファイルやスクリプトの変更。GitHub Actionsなどのワークフロー設定
#   docs:     ドキュメントのみの変更。README、Wiki、コメントの追記・修正など
#
# 参考:
#   https://www.conventionalcommits.org/ja/v1.0.0/
